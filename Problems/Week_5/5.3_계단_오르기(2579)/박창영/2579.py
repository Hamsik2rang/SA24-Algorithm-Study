# 백준 2579 - 계단 오르기(다이나믹 프로그래밍)
# 문제
# 계단 오르기 게임은 계단 아래 시작점부터 
# 계단 꼭대기에 위치한 도착점까지 가는 게임이다.

# 계단 오르는 데는 다음과 같은 규칙이 있다.

# 계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 
# 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
# 연속된 세 개의 계단을 모두 밟아서는 안 된다. 
# 단, 시작점은 계단에 포함되지 않는다.
# 마지막 도착 계단은 반드시 밟아야 한다.
# 따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다. 
# 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 
# 첫 번째, 두 번째, 세 번째 계단을 연속해서 모두 밟을 수는 없다.

# 각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 
# 총 점수의 최댓값을 구하는 프로그램을 작성하시오.

# 입력
# 입력의 첫째 줄에 계단의 개수가 주어진다.

# 둘째 줄부터 한 줄에 하나씩 제일 아래에 놓인 계단부터 순서대로 각 계단에 쓰여 있는 점수가 주어진다. 계단의 개수는 300이하의 자연수이고, 계단에 쓰여 있는 점수는 10,000이하의 자연수이다.

# 출력
# 첫째 줄에 계단 오르기 게임에서 얻을 수 있는 총 점수의 최댓값을 출력한다.

# 예제 입력 1 
# 6
# 10
# 20
# 15
# 25
# 10
# 20
# 예제 출력 1 
# 75

#------------------------------------------------------------------
n = int(input()) # 계단이 몇 개 있는지에 대한 변수 n 
s = [0 for i in range(301)] # 각 계단에 대한 점수 리스트 s
dp = [0 for i in range(301)] # 점수의 합을 저장하는 리스트 dp

for i in range(n): # 점수 리스트 s 입력받기
    s[i] = int(input())

dp[0] = s[0] # dp리스트의 첫번째에는 당연히 s[0]이 들어가야 함
dp[1] = s[0]+s[1] # dp[1]에는 s[0]+s[1] 넣기

# dp[2]에는 첫번째 계단을 밟고 두 계단을 올랐을때 합과 
# 두번째 계단을 밟고 한 계단을 올랐을때 합중 큰 값을 넣어준다.
dp[2] = max(s[1] + s[2], s[0]+s[2])

# 마지막 계단은 꼭 밟아야 하므로
# 1. 마지막 계단의 전 계단을 밟은 경우와
# 2. 마지막 계단의 전 계단을 밟지 않은 경우가 있다.
# 그러므로 dp[i]에는
# dp[i - 3] + s[i] + s[i - 1]와 dp[i - 2] + s[i] 이 들어갈 수 있다.
# 이 두값중에서 큰 값을 넣어준다.
for i in range(3, n):
    dp[i] = max(dp[i-3] + s[i-1] + s[i], dp[i-2] + s[i])

print(dp[n-1])